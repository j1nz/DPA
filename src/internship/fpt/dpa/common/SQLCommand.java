package internship.fpt.dpa.common;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class SQLCommand {
	public static SQLCommand instance;
	
	private Connection cn = null;
	private ResultSet rs = null;
	private PreparedStatement pstm = null;
	
	public SQLCommand(){
		
	}

	/**
	 * ƒ?·∫£m b·∫£o m·ªói object ch·ªâ th·ªÉ hi·ªán duy nh·∫•t qua instance (SingleTon trong Design Pattern)
	 * @return instance
	 */
	public static SQLCommand getInstance() {
		if(instance == null)
			instance = new SQLCommand();
		return instance;
	}

	/**
	 * Select d·ªØ li·ªáu theo d√≤ng v·ªõi t√™n tr∆∞·ª?ng, t√™n b·∫£ng ng∆∞·ª?i d√πng nh·∫≠p v√†o
	 * @param column_name
	 * @param table_name
	 * @return SELECT <t√™n tr∆∞·ª?ng, ...> FROM <t√™n b·∫£ng>
	 */
	public static String SelectRowWithoutWhere(String column_name, String table_name){
		return "SELECT " +column_name+ " FROM " +table_name;
	}
	
	/**
	 * Select d√≤ng v·ªõi t√™n tr∆∞·ª?ng, t√™n b·∫£ng, ƒëi·ª?u ki·ªán, ng∆∞·ª?i d√πng nh·∫≠p v√†o
	 * @param column_name
	 * @param table_name
	 * @param condition_after_where
	 * @return SELECT <t√™n tr∆∞·ª?ng, ...> FROM <t√™n b·∫£ng> WHERE <ƒëi·ª?u ki·ªán>
	 */
	public static String SelectRowWithWHERE(String column_name, String table_name, String condition_after_where){
		return "SELECT " +column_name+ " FROM " +table_name+ " WHERE " +condition_after_where;
	}
	
	/**
	 * Select t·∫•t c·∫£ d√≤ng t·ª´ m·ªôt b·∫£ng ng∆∞·ª?i d√πng nh·∫≠p v√†o
	 * @param table_name
	 * @return SELECT * FROM <t√™n b·∫£ng>
	 */
	public static String SelectAllRow(String table_name){
		return "SELECT * FROM " +table_name;
	}
	
	/**
	 * Update Kh√¥ng s·ª≠ dung where, c√¢u l·ªánh √°p d·ª•ng cho PreparedStatement v√¨ c√≥ tham s·ªë <?>
	 * @param field_name
	 * @param table_name
	 * @param newVirable
	 * @return UPDATE <t√™n b·∫£ng> SET <t√™n c·ªôt> = ?
	 */
	public static String UpdateWithoutWHERE(String column_name, String table_name) {
		return "UPDATE "+table_name+ " SET " +column_name+ " = ?";
	}
	
	/**
	 * Update in SQL s·ª≠ d·ª•ng th√™m ƒëi·ª?u ki·ªán WHERE, √°p d·ª•ng cho preparedStatement
	 * @param column_name
	 * @param table_name
	 * @param condition_after_where
	 * @return UPDATE <table name> SET <column_name> = <gi√° tr·ªã m·ªõi> WHERE <ƒëi·ª?u ki·ªán ƒë∆∞a v√†o>
	 */
	public static String UpdateWithWHERE(String column_name, String table_name, String condition_after_where) {
		return "UPDATE " +table_name+ " SET " +column_name+ " = ? WHERE " +condition_after_where;
	}
	
	/**
	 * X√≥a theo d√≤ng ·ªü trong b·∫£ng v·ªõi ƒëi·ª?u ki·ªán WHERE
	 * @param table_name
	 * @param condition_after_where
	 * @return DELETE FROM <t√™n b·∫£ng> WHERE <ƒëi·ª?u ki·ªán>
	 */
	public static String DeleteRow(String table_name, String condition_after_where) {
		return "DELETE FROM " +table_name+ " WHERE " +condition_after_where;
	}
	
	/**
	 * C√¢u l·ªánh ch√®n d·ªØ li·ªáu v√†o m·ªôt b·∫£ng (n·∫øu nhi·ª?u c·ªôt th√¨ c·ªôt ngƒÉn c√°ch nhau b·ªüi d·∫•u ph·∫£i v√† gi√° tr·ªã m·ªõi c≈©ng v·∫≠y c≈©ng ngƒÉn c√°ch nhau b·ªüi d·∫•u ph·∫©y)
	 * @param column_name
	 * @param table_name
	 * @param new_values
	 * @return INSERT INTO <t√™n b·∫£ng> (<t√™n c·ªôt 1>, <t√™n c·ªôt 2>, ...) VALUES (<gi√° tr·ªã 1>, <gi√° tr·ªã 2>, ...)
	 */
	public static String InsertRowWithColumnName(String column_name, String table_name, String new_values) {
		return "INSERT INTO " +table_name+ " ("+column_name+") VALUES ("+new_values+")";
	}
	
	/**
	 * C√¢u l·ªánh ch√®n d·ªØ li·ªáu v√†o b·∫£ng kh√¥ng s·ª≠ d·ª•ng c·ªôt
	 * @param table_name
	 * @param new_values
	 * @return INSERT INTO <t√™n b·∫£ng> VALUES (<gi√° tr·ªã m·ªõi 1>, <gi√° tr·ªã m·ªõi 2>, ...)
	 */
	public static String InsertRowWithoutColumn(String table_name, String new_values) {
		return "INSERT INTO " +table_name+ " VALUES ("+new_values+")";
	}
		
	/**
	 * H√†m gi√∫p th·ª±c thi c√¢u l·ªánh SELECT v√† tr·∫£ v·ª? k·∫øt qu·∫£ truy v·∫•n ƒë∆∞·ª£c t·ª´ database s·ª≠ d·ª•ng PreparedStatemnent, gi·∫£m thi·ªÉu th·ª?i gian code;
	 * @param connection: truy·ª?n v√†o m·ªôt k·∫øt n·ªëi
	 * @param sql_command: truy·ª?n v√†o l·ªánh c·∫ßn th·ª±c thi
	 * @return ResultSet rs: tr·∫£ v·ª? k·∫øt qu·∫£
	 * @throws SQLException n√©m ra l·ªói ngo·∫°i l·ªá (n·∫øu c√≥)
	 */
	public ResultSet selectWithPreparedStatementConnectDB(Connection connection, String sql_command) throws SQLException {
		try {
			cn = connection;
			pstm = cn.prepareStatement(sql_command);
			rs = pstm.executeQuery();
			
		} catch (SQLException e) {
			
			e.printStackTrace();
			throw e;
		} finally {
			cn.close();
		}
		
		return rs;
	}
	
	
}
